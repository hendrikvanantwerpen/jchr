
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\
 *     __   __)  __     __)     _                                                    *
 *    (, ) /    (, /   /    ___/__)                                                  *
 *      /(        /   /    (, /    _     _ _   _ __                                  *
 *   ) /  \_  o  /   /    o  /   _(/_(_(_(/___(/_/ (_                                *
 *  (_/     JJJJ(___(_J     (_____CCCCCCCCHHHHHHHHH     HHHHHHHHHRRRRRRRRRRRRRRRRR   *
 *         J:::::::::J   CCC::::::::::::CH:::::::H     H:::::::HR::::::::::::::::R   *
 *         J:::::::::J CC:::::::::::::::CH:::::::H     H:::::::HR::::::RRRRRR:::::R  *
 *         JJ:::::::JJC:::::CCCCCCCC::::CHH::::::H     H::::::HHRR:::::R     R:::::R *
 *           J:::::J C:::::C       CCCCCC  H:::::H     H:::::H    R::::R     R:::::R *
 *           J:::::JC:::::C                H:::::H     H:::::H    R::::R     R:::::R *
 *           J:::::JC:::::C                H::::::HHHHH::::::H    R::::RRRRRR:::::R  *
 *           J:::::jC:::::C                H:::::::::::::::::H    R:::::::::::::RR   *
             J:::::JC:::::C                H:::::::::::::::::H    R::::RRRRRR:::::R  *
 JJJJJJJ     J:::::JC:::::C                H::::::HHHHH::::::H    R::::R     R:::::R *
 J:::::J     J:::::JC:::::C                H:::::H     H:::::H    R::::R     R:::::R *
 J::::::J   J::::::J C:::::C       CCCCCC  H:::::H     H:::::H    R::::R     R:::::R *
 J:::::::JJJ:::::::J  C:::::CCCCCCCC::::CHH::::::H     H::::::HHRR:::::R     R:::::R *
  JJ:::::::::::::JJ    CC:::::::::::::::CH:::::::H     H:::::::HR::::::R     R:::::R *
    JJ:::::::::JJ        CCC::::::::::::CH:::::::H     H:::::::HR::::::R     R:::::R *
 *    JJJJJJJJJ             CCCCCCCCCCCCCHHHHHHHHH     HHHHHHHHHRRRRRRRR     RRRRRRR *
 *                                                                                   *
 * This file was generated by the K.U.Leuven JCHR System                             *
 * (available at http://www.cs.kuleuven.be/~petervw/JCHR/).                          *
 *                                                                                   *
 * Do not edit: edit the jchr-source file instead.                                   *
\* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

package jchr.example.gcd;
import be.kuleuven.jchr.runtime.Constraint;

import java.util.HashMap;
import java.util.Iterator;


/**
 * @author Peter Van Weert
 */
public final class GcdConstraint extends Constraint {
	protected final GcdHandler $handler;	
			protected final long $X0;
		
	public GcdConstraint(
		long $X0 
	,
		GcdHandler $handler) {
		
        this.$handler = $handler;
        
        	this.$X0 = $X0;
    }

    	public long 	get$X0()
 {
    		return this.$X0;
    	}
    
    /**
     * @inheritDoc
     */
    @Override
    public final void activate() {    	
		if (
			gcd_1()
			 &&
			gcd_2()
			 &&
			gcd_3()
			
		) {
    if (! stored) {    	
	stored = true;
	$handler.storeGcd(this);
    	
	}
		}
    }

    /**
     * @inheritDoc
     */
    @Override        
    public final void reactivate() {
	    	generation++;
		if (
			gcd_1()
			 &&
			gcd_2()
			 &&
			gcd_3()
			
		) {
		}
    }

    	

	private final boolean gcd_1() {
		final GcdConstraint gcd_1 = this;
			final long 
				$1 = this.$X0;
			
		
		
	if (	$1 == 0
) {	// Guard
	
				gcd_1.kill();
	
//	System.out.println("Rule $rule_0 fired");
	
	

			return false;
	}	
		
		
			return true;
	}
    	

	private final boolean gcd_2() {
		final GcdConstraint gcd_2 = this;
			final long 
				M = this.$X0;
			
		
		
   	
   	final Iterator<GcdConstraint> gcd_3_iter 
   		= $handler.lookupGcd(
		);
   	GcdConstraint gcd_3;
	
			 long N;

label_gcd_3: while (gcd_3_iter.hasNext()) {
   		gcd_3 = gcd_3_iter.next();

	
		if (
				gcd_2 != gcd_3 
			) {
				
				N = gcd_3.$X0;

	if (	M >= N
) {	// Guard
	
				gcd_2.kill();
	
//	System.out.println("Rule $rule_1 fired");
	
	
 			new GcdConstraint(
			be.kuleuven.jchr.util.arithmetics.primitives.longUtil.sub(
		M, 
		N
	)

	,
		$handler).activate()
;

			return false;
	}	
			}
	}
		
		
			return true;
	}
    	

	private final boolean gcd_3() {
		final GcdConstraint gcd_3 = this;
			final long 
				N = this.$X0;
			
		
		
   	
   	final Iterator<GcdConstraint> gcd_2_iter 
   		= $handler.lookupGcd(
		);
   	GcdConstraint gcd_2;
	
			 long M;

label_gcd_2: while (gcd_2_iter.hasNext()) {
   		gcd_2 = gcd_2_iter.next();

	
		if (
				gcd_3 != gcd_2 
			) {
				
				M = gcd_2.$X0;

	if (	M >= N
) {	// Guard
	
				gcd_2.kill();
	
//	System.out.println("Rule $rule_1 fired");
	
		final int oldGeneration = generation;

    if (! stored) {    	
	stored = true;
	$handler.storeGcd(this);
    	
	}
	
 			new GcdConstraint(
			be.kuleuven.jchr.util.arithmetics.primitives.longUtil.sub(
		M, 
		N
	)

	,
		$handler).activate()
;

			if (oldGeneration != generation) return false;
			if (! alive) return false;
				
					continue label_gcd_2;
						}	
			}
	}
		
		
			return true;
	}
        
    @Override
    public final String toString() {
    	return new StringBuilder()
    		.append("gcd(")
			.append($X0)
			.append(")#")
			.append(ID)
			.toString();
    }
}

